name: Release Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout OpenAPI spec
        uses: actions/checkout@v4
        with:
          repository: gardentalkz/gardentalkz-openapi-spec
          path: openapi-spec
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: openapi-spec/package-lock.json

      - name: Install OpenAPI Generator dependencies
        working-directory: openapi-spec
        run: npm ci

      - name: Generate OpenAPI artifacts
        working-directory: openapi-spec
        run: npm run generate:backend

      - name: Install generated auth dependency
        working-directory: openapi-spec/generated/backend/auth
        run: |
          chmod +x ./gradlew
          ./gradlew publishToMavenLocal

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Build with Gradle
        env:
          CI: true
        run: ./gradlew clean build --no-daemon

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ inputs.version }} -m "Release version ${{ inputs.version }}"
          git push origin v${{ inputs.version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: Release v${{ inputs.version }}
          body: |
            ## Release v${{ inputs.version }}
            
            ### Changes
            - [Add your release notes here]
          draft: false
          prerelease: false

      - name: Prepare next development iteration
        run: |
          # Calculate next version
          CURRENT_VERSION="${{ inputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
          
          echo "Next version: $NEXT_VERSION"
          
          # Update build.gradle
          sed -i "s/version = '.*'/version = '$NEXT_VERSION'/" build.gradle
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add build.gradle
          git commit -m "Bump version to $NEXT_VERSION for next development iteration"
          git push origin ${{ github.ref }}

      - name: Output next version
        run: |
          CURRENT_VERSION="${{ inputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV 